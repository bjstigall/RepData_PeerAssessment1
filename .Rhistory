find.package("devtools")
install.package("devtools")
install.packages("devtools")
install.packages("devtools")
find_rtools()
library(devtools)
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
q()
q()
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
content(req)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
clsoe(con)
close(con)
htmlCode
nchars(htmlCode)
nchar(htmlCode)
nchar(htmlCode[c(10,20.30,100)])
nchar(htmlCode[c(10,20,30,100)])
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileUrl, destfile="./wksst8110.for")
data <- read.csv("./wksst8110.for", header = TRUE)
file_name <- "./wksst8110.for"
df <- read.fwf(file=file_name,widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
sum(df[, 4])
library(httr)
oauth_endpoints("github")
myapp ", secret = "")
github_token  req  stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
content$created_at
content
req
content(req)
nchar(htmlCode[c(10,20,30,100)])
swril
swirl
library(swirl)
swirl
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, desc(r_arch:country)
)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
(-5:20)
-(5:20)
select(cran, -(x:size))
select(cran, -x:size)
select(cran, -country:r_arch)
select(cran, -(country:r_arch))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1",country == "US")
?Comparison
filter(cran, r_version > "3.0.1" & country == "IN")
filter(cran, r_version > "3.0.1", country == "IN")
filter(cran, r_version <= "3.0.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" |country == "IN")
filter(cran, size > 100500 & r_os="linux-gnu")
filter(cran, size > 100500 & r_os=="linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package,ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
rm(list=ls(all=TRUE))
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages(ggplot2)
install.packages("ggplot2")
swirl()
install.packages("RMarkdown")
install.packages("rmarkdown")
install.packages("knitr")
with(dat_tbl_summary_intv, {
plot(interval, avg_steps, type = 'l',
main = 'Average Steps by Time Interval',
xlab = '5 Minute Time Interval',
ylab = 'Average Number of Steps')
})
dat_tbl_summary_intv = dat_tbl[, list(avg_steps = mean(steps, na.rm = T)),
by = interval]
DayInterval<-aggregate(steps~interval,data=actdat,mean,na.rm=TRUE)
plot(steps~interval,data=DayInterval,type="l")
DayInterval<-aggregate(steps~interval,data=actdat,mean,na.rm=TRUE)
actdat <- read.csv("activity.csv", na.strings = "NA", header = TRUE)
actdat$date <- as.Date(actdat$date)
setwd("~/GitHub/RepData_PeerAssessment1")
rm(list=ls(all=TRUE))
actdat <- read.csv("activity.csv", na.strings = "NA", header = TRUE)
actdat$date <- as.Date(actdat$date)
DayInterval<-aggregate(steps~interval,data=actdat,mean,na.rm=TRUE)
plot(steps~interval,data=DayInterval,type="l")
head(actdat)
actdat
stepsInterval[which.max(stepsInterval$steps),]$interval
stepsInterval[which.max(DayInterval$steps),]$interval
DayInterval[which.max(DayInterval$steps),]$interval
sum(is.na(actdat$steps))
?head
head(actdat n=100)
head(actdat, n=100)
head(actdat, n=1000)
actFill <- actdat[is.na(actdat$steps)] <- 0
actFill <- actdat
actdat[is.na(steps)] <- 0
actdat[is.na(actFill$steps)] <- 0
actdat[is.na(actFill$steps), "steps"] <- 0
actdat
head(actdat)
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
actdat <- read.csv("activity.csv", na.strings = "NA", header = TRUE)
actdat$date <- as.Date(actdat$date)
sum(is.na(actdat$steps))
actFill <- actdat
actFill <- actFill[is.na(actFill$steps), "steps"] <- 0
actFill <- actdat
actFill <- actdat[is.na(actdat$steps), "steps"] <- 0
actFill <- actdat
actFill <- actFill[is.na(actFill$steps), "steps"] <- 0
actFill[is.na(actFill$steps), "steps"] <- 0
actFill <- actdat
actFill[is.na(actFill$steps), "steps"] <- 0
?weekdays
weekdays(actFill$date)
daytype = function(x)
{
if(x %in% c('Saturday', 'Sunday')){
return('Weekend')
}
return('Weekday')
}
daytype(actFill$date)
daytype = function(x)
{
if(x %in% c("Saturday", "Sunday")){
return("Weekend")
}
return("Weekday")
}
daytype(actFill$date)
actdat$date <- as.Date(actdat$date)
actFill$date <- as.Date(actFill$date)
actdat$date <- as.Date(actdat$date)
daytype(actFill$date)
daytype = function(x)
{
if(x %in% c('Saturday', 'Sunday')){
return('Weekend')
}
return('Weekday')
}
actFill$daytype = daytype(actFill$date)
actFill$daytype = weekdays(daytype(actFill$date))
weekdays
actFill$daytype = daytype(weekdays(actFill$date))
actFill$dayname = weekdays(actFill$date)
str(actFill)
head(dayfill, n=300)
head(dayFill, n=300)
head(actFill, n=300)
head(actFill, n=3000)
actdat$daytype <- as.factor(apply(daytype(actFill$dayname)))
actdat$daytype <- as.factor(apply(daytype,actFill$dayname))
actdat$daytype <- as.factor(apply(daytype, FUN=actFill$dayname))
?apply
actdat$daytype <- as.factor(apply(actDat$daytype, 1, FUN=actFill$dayname))
actdat$daytype <- as.factor(apply(actDat$daytype, 1, FUN=daytype))
actdat$daytype <- as.factor(apply(actFill$daytype, 1, FUN=daytype))
actdat$daytype <- as.factor(apply(actFill$dayname, 1, FUN=daytype))
actdat$daytype <- as.factor(apply(as.array(actFill$dayname), 1, FUN=daytype))
actFill$daytype <- as.factor(apply(as.array(actFill$dayname), 1, FUN=daytype))
head(actFill, n=300)
head(actFill, n=3000)
xyplot(steps~interval | daytype, data = ActFill,
type = 'l',
xlab = 'Interval',
ylab = 'Number of Steps',
layout = c(1,2))
library(lattice)
xyplot(steps~interval | daytype, data = ActFill,
type = 'l',
xlab = 'Interval',
ylab = 'Number of Steps',
layout = c(1,2))
xyplot(steps~interval | daytype, data = actFill,
type = 'l',
xlab = 'Interval',
ylab = 'Number of Steps',
layout = c(1,2))
avgDayType = actFill[, list(avgSteps = mean(steps, na.rm = T)),
by = list(interval, daytype)]
xyplot(steps~interval | daytype, data = avgDayType,
type = 'l',
xlab = 'Interval',
ylab = 'Number of Steps',
layout = c(1,2))
avgDayType = actFill[, list(avgSteps = mean(steps, na.rm = T)),
by = list(interval, daytype)]
avgDayType = aggregate(steps~interval+day,activityFilled,mean)
avgDayType = aggregate(steps~interval+dayname,activityFilled,mean)
avgDayType = aggregate(steps~interval+dayname, actFill ,mean)
avgDayType
xyplot(steps~interval | daytype, data = avgDayType,
type = 'l',
xlab = 'Interval',
ylab = 'Number of Steps',
layout = c(1,2))
xyplot(steps~interval|factor(dayname),data=avgDayType, aspect=1/2,type="l")
xyplot(steps~interval|factor(daytype),data=avgDayType, aspect=1/2,type="l")
avgDayType = aggregate(steps~interval+daytype, actFill ,mean)
xyplot(steps~interval|factor(daytype),data=avgDayType, aspect=1/2,type="l")
